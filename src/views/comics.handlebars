{{!--
Comics Page - Shows all comic series
--}}

<div class="my-12 sm:my-28"></div>

{{> nav/nav}}

<div class="container mx-auto px-4 py-12">
  <h1 class="text-4xl md:text-6xl font-tiempos-headline italic text-purple-600 mb-6 text-center font-light typo-title-font">Comic Series</h1>
  <p class="text-xl text-center text-gray-600 mb-16 max-w-3xl mx-auto">Khám phá các series truyện tranh độc đáo và hấp dẫn</p>

  {{#if comics.length}}
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {{#each comics}}
        <div class="comic-card-wrapper" data-comic='{{json this}}'>
          {{> components/article-card/article-card 
              title=this.title 
              excerpt=this.excerpt 
              image=this.thumbnail
              type=this.type
              publishDate=this.publishDate
              url="javascript:void(0)" 
              class="h-full cursor-pointer"
          }}
        </div>
      {{/each}}
    </div>
  {{else}}
    <div class="text-center py-16">
      <p class="text-2xl text-gray-500">Không có comic series nào</p>
    </div>
  {{/if}}
</div>

<!-- Mobile Popup Container - Separate from the default popup -->
<div id="mobile-comic-popup" class="mobile-comic-popup">
  <div class="mobile-popup-handle"></div>
  <div id="mobile-comic-content" class="mobile-comic-content"></div>
</div>
<div id="mobile-popup-overlay" class="mobile-popup-overlay"></div>

<!-- Initialize Comic Popup -->
<script>
// Dynamically load ComicPopupService module
function loadComicPopupService() {
  if (typeof window.ComicPopupService !== 'undefined') return Promise.resolve(window.ComicPopupService);
  
  return import('/script/comic-popup.js')
    .then(module => {
      window.ComicPopupService = module.ComicPopupService;
      
      // Override or enhance methods to handle body scroll
      const originalOpenPopup = window.ComicPopupService.openPopup;
      const originalClosePopup = window.ComicPopupService.closePopup;
      
      // Override openPopup to handle mobile differently
      window.ComicPopupService.openPopup = function(comicData) {
        // Check if it's mobile
        const isMobile = window.innerWidth < 768;
        
        if (isMobile) {
          // For mobile, use a completely separate popup
          this.openMobilePopup(comicData);
        } else {
          // Desktop - use original popup
          if (originalOpenPopup) originalOpenPopup.call(this, comicData);
        }
      };
      
      // Add mobile popup methods
      window.ComicPopupService.openMobilePopup = function(comicData) {
        // Lock body scroll
        document.body.style.overflow = 'hidden';
        
        // Get mobile popup elements
        const mobilePopup = document.getElementById('mobile-comic-popup');
        const mobileContent = document.getElementById('mobile-comic-content');
        const mobileOverlay = document.getElementById('mobile-popup-overlay');
        
        if (!mobilePopup || !mobileContent) return;
        
        // Populate content - with simplified version (no episodes)
        mobileContent.innerHTML = this.renderMobileComicDetails(comicData);
        
        // Show overlay with animation
        if (mobileOverlay) {
          mobileOverlay.classList.add('open');
        }
        
        // Show popup with animation after a short delay
        setTimeout(() => {
          mobilePopup.classList.add('open');
        }, 50);
      };
      
      window.ComicPopupService.closeMobilePopup = function() {
        const mobilePopup = document.getElementById('mobile-comic-popup');
        const mobileOverlay = document.getElementById('mobile-popup-overlay');
        
        if (mobilePopup) {
          mobilePopup.classList.remove('open');
        }
        
        if (mobileOverlay) {
          mobileOverlay.classList.remove('open');
        }
        
        // Unlock body scroll after animation completes
        setTimeout(() => {
          document.body.style.overflow = '';
        }, 300);
      };
      
      // Override closePopup to handle mobile differently
      window.ComicPopupService.closePopup = function() {
        // Check if it's mobile
        const isMobile = window.innerWidth < 768;
        
        if (isMobile) {
          this.closeMobilePopup();
        } else {
          // Desktop - use original popup close
          if (originalClosePopup) originalClosePopup.call(this);
        }
      };
      
      // Add method to render mobile-specific comic details
      window.ComicPopupService.renderMobileComicDetails = function(comic) {
        const thumbnailUrl = comic.thumbnail instanceof Object 
          ? comic.thumbnail.formats?.medium?.url 
          : comic.thumbnail;
          
        let html = `
          <div class="p-5">
            <div class="flex flex-col gap-5 px-4">
              <div class="w-full flex justify-center">
                ${thumbnailUrl ? `
                  <div class="aspect-[3/4] max-h-[50vh] rounded-lg overflow-hidden shadow-md">
                    <img src="${thumbnailUrl}" alt="${comic.title}" class="w-full h-full object-cover" aria-label="Comic series ${comic.title}">
                  </div>
                ` : `
                  <div class="aspect-[3/4] rounded-lg bg-gradient-to-br from-purple-500 to-purple-800 shadow-md"></div>
                `}
              </div>
              
              <div class="w-full">
                <h2 class="text-xl font-tiempos-headline text-purple-700 mb-2">${comic.title}</h2>
                
                <div class="flex flex-wrap items-center text-sm text-gray-600 mb-4">
                  <span class="inline-flex items-center text-purple-600 font-semibold mr-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A2 2 0 013 12V7a4 4 0 014-4z" />
                    </svg>
                    Comic Series
                  </span>
                  <span class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    ${comic.publishDate}
                  </span>
                </div>
                
                <div class="prose prose-sm max-w-none mb-6 text-gray-700 line-clamp-3">
                  <p>${comic.description}</p>
                </div>
                
                <div class="mt-4">
                  <a href="/comic/${comic.slug}" class="inline-flex items-center px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors">
                    Xem chi tiết
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                    </svg>
                  </a>
                </div>
              </div>
            </div>
          </div>
        `;
        
        return html;
      };
      
      // Set up mobile popup event listeners
      const setupMobilePopup = () => {
        const mobileOverlay = document.getElementById('mobile-popup-overlay');
        const mobilePopupHandle = document.querySelector('.mobile-popup-handle');
        
        if (mobileOverlay) {
          mobileOverlay.addEventListener('click', () => {
            window.ComicPopupService.closeMobilePopup();
          });
        }
        
        if (mobilePopupHandle) {
          mobilePopupHandle.addEventListener('click', () => {
            window.ComicPopupService.closeMobilePopup();
          });
        }
      };
      
      // Initialize mobile popup when DOM is loaded
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', setupMobilePopup);
      } else {
        setupMobilePopup();
      }
      
      return window.ComicPopupService;
    })
    .catch(err => {
      console.error('Failed to load ComicPopupService:', err);
      return null;
    });
}

// Initialize comic popups
function initializeComicPopups() {
  const comicCards = document.querySelectorAll('.comic-card-wrapper');
  
  comicCards.forEach(card => {
    card.addEventListener('click', function() {
      try {
        const comicData = JSON.parse(this.dataset.comic);
        
        loadComicPopupService().then(ComicPopupService => {
          if (ComicPopupService) {
            ComicPopupService.openPopup(comicData);
          }
        });
      } catch (err) {
        console.error('Error opening comic popup:', err);
      }
    });
  });
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
  loadComicPopupService().then(ComicPopupService => {
    if (ComicPopupService) {
      ComicPopupService.initialize();
      initializeComicPopups();
    }
  });
});
</script>

<!-- Styles for responsive layout and mobile popup animation -->
<style>
  @media (max-width: 768px) {
    .comic-card-wrapper {
      margin-bottom: 1rem;
    }
  }
  
  /* Mobile Popup Styles - Independent of media queries to ensure they work */
  .mobile-comic-popup {
    position: fixed;
    bottom: 0; /* Start off-screen */
    left: 0;
    right: 0;
    width: 100%;
    background-color: white;
    border-top-left-radius: 16px;
    border-top-right-radius: 16px;
    box-shadow: 0 -4px 12px rgba(0, 0, 0, 0.15);
    transition: transform 0.3s ease-in-out;
    z-index: 1001; /* Ensure popup is above overlay */
    max-height: 90vh;
    overflow-y: auto;
    transform: translateY(100%);
    padding-bottom: 20px;
  }

  .mobile-comic-content {
    max-height: 90vh;
    min-height: 80vh;
  }

  .mobile-comic-popup.open {
    transform: translateY(0);
  }
  
  .mobile-popup-handle {
    width: 40px;
    height: 5px;
    background-color: #ddd;
    border-radius: 5px;
    margin: 12px auto;
    cursor: pointer;
  }


  .mobile-popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
    pointer-events: none;
  }

  .mobile-popup-overlay.open {
    opacity: 1;
    pointer-events: auto;
  }
  
  /* Episode list is hidden on mobile */
  @media (max-width: 768px) {
    .mobile-hide-episodes {
      display: none !important;
    }
  }
</style>